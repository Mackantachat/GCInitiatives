using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using PTT_GC_API.API.Helpers;
using PTT_GC_API.Dtos.Initiative;
using PTT_GC_API.Dtos.NewApprovalSystem;
using PTT_GC_API.Helpers;
using PTT_GC_API.Models.Initiative;
using PTT_GC_API.Models.Owner;
using PTT_GC_API.Models.Role;
using PTT_GC_API.Dtos.VacPic;
using PTT_GC_API.Models.User;
using PTT_GC_API.Models.VacPic;
using System.Data;
using Microsoft.AspNetCore.Http;
using PTT_GC_API.Models.ApprovalFlow;

namespace PTT_GC_API.Data.Interface
{
    public interface InitiativeInterface
    {
        void Add<T>(T entity) where T : class;
        void Update<T>(T entity) where T : class;
        void Delete<T>(T entity) where T : class;
        Task<bool> Save();
        Task<bool> Any();
        Task<int> LastIdInitiative();
        Task<Initiative> LastInitiative();
        Task<PagedList<Initiative>> GetInitiatives(InitiativeParams InitiativeParams);
        Task<PagedList<InitiativeList>> GetListsInitiative(InitiativeParams InitiativeParams);
        Task<IEnumerable<string>> GetInitiativeList([FromQuery]OwnerParams param);
        Task<Initiative> GetInitiative(int id);
        Task<string[]> InitiativeCoDeveloperCreate(int id, string[] coDevelopers);
        Task<bool> InitiativeCoDeveloperDelete(int id);
        Task<bool> CheckApproved(int id);
        Task<Attachment> InitiativeAttachmentCreate(int id, [FromForm]InitiativeCreateAttachment initiative);
        Task<Attachment> CategoryAttachmentCreate(int id, [FromForm]InitiativeCreateAttachment initiative,AttechmentCategory attechmentCategory);
        Task<Attachment> GetAttachment(int id);
        Task<List<Attachment>> GetCategoryAttachment(int id, AttechmentCategory attechmentCategory);
        Task<InitiativeCreateProduct> CreateInitiativeProduct(int id, InitiativeCreateProduct initiativeCreateProduct);
        Task<InitiativeCreateMilestone> CreateInitiativeMilestone(int id, InitiativeCreateMilestone initiativeCreateMilestone);
        Task<InitiativeProgressAndMilestone> CreateInitiativeProgressAndMilestone(int id, InitiativeProgressAndMilestone initiativeProgressAndMilestone);
        Task<InitiativeCreateFinancialIndicator> CreateFinancialIndicator(int id, InitiativeCreateFinancialIndicator initiativeFinancialIndicator);
        Task<bool> InitiativeFinancialDelete(int id);
        Task<bool> InitiativeDetailDelete(int id);
        Task<User> GetUserInitiative(string username);
        Task<Initiative> SetActionBy(int id, string username, string status, string stage, InitiativeTypeSubType initiativeTypeSubType);
        Task<bool> CheckApprove(int id, string actionBy);
        Task<int> RemoveInitiativeActions(int initiativeId, string actionBy);
        Task<int> CountInitiativeAction(int id);
        Task<int> CreateStagesTracking(Initiative initiative, InitiativeTypeSubType initiativeTypeSubType);
        Task<int> UpdateStagesTracking_OnApprove(Initiative initiative, InitiativeSubmit initiativeSubmit, string subType);
        Task<int> UpdateStagesTracking_OnSubmit(Initiative initiative, InitiativeSubmitStageStatus initiativeSubmitStageStatus, string statusDirection, InitiativeTypeSubType initiativeTypeSubType);
        Task<int> InsertStagesHistory(Initiative initiative, InitiativeSubmit initiativeSubmit, ApprovalNewSystemParam approvalNewSystemParam = null);
        Task CallMicrosoftFlow_SendMail(int id, string action);
        Task<int> ChangeApproverStatusTrackingFromSetActionBy(Initiative initiative, InitiativeTypeSubType initiativeTypeSubType);
        Task<bool> isRemainsActionBy(int initiativeId, string approverType);
        Task<bool> isMatchedApproverType(int initiativeId, string approverEmail, string approverType);
        Task<int> RemoveActionBy_ByApproverType(int initiativeId, string approverType, string approverEmail);
        Task<int> UpdateLastestApproved(int initiativeId, string stage, DateTime? nowDateTime = null);
        Task<int> UpdateLastestSubmittedSIL(int initiativeId, string stage, DateTime? dateTime);
        Task<DateTime> GetLastestUpdate(int id);
        Task<int> MyTaskInProgress(MyInitiative MyInitiative);
        Task<int> MyTaskNotStarted(MyInitiative MyInitiative);
        Task<int> MyInitiativeDraft(MyInitiative MyInitiative);
        Task<int> MyInitiativeInProgress(MyInitiative MyInitiative);
        Task<int> MyInitiativeCompleted(MyInitiative MyInitiative);
        Task<int> MyInitiativeCanceled(MyInitiative MyInitiative);
        Task<Owner> DMApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> VPApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> EVPApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> BudgetTeamApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> AppRequestApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> WBSRequestApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> BudgetDistributeApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> GetCapexApproverByStage(InitiativeTypeSubType initiativeTypeSubType, string stage);
        Task<string> GetUserCompany(string email);
        Task<bool> SetRequestCapex(int id);
        Task<string> GetSubType(int initiativeId);
        Task<string> GetProcessType(int initiativeId);
        //Task<int> AddStagesTracking_Capexs(Initiative initiative, string subType);
        Task<int> GetOrderStage(string nowStage, InitiativeTypeSubType initiativeTypeSubType);
        Task<string> GetNextStage(int nowOrderStage, InitiativeTypeSubType initiativeTypeSubType);
        Task<string> GetReviseStage(int nowOrderStage, InitiativeTypeSubType initiativeTypeSubType);
        Task<string> GetApproveStatus(InitiativeTypeSubType initiativeTypeSubType, InitiativeSubmit initiativeSubmit, string nextStage);
        Task<string> GetSubmitNextStage(int nowOrderStage, InitiativeTypeSubType initiativeTypeSubType);
        Task<string> GetSubmitNextStatus(InitiativeTypeSubType initiativeTypeSubType, InitiativeSubmitStageStatus initiativeSubmitStageStatus, string nowStage);
        Task<string> GetSubmitBackwardStage(int nowOrderStage, InitiativeTypeSubType initiativeTypeSubType);
        Task<string> GetFirstStageApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> BudgetPoolApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> BudgetExcellenceDistributeApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> GetDMApproverFromInitiativeDetail(int initiativeId);
        Task<Owner> GetVPApproverFromInitiativeDetail(int initiativeId);
        Task<Owner> GetDMApproverFromDetailInformation(int initiativeId);
        Task<Owner> GetVPApproverFromDetailInformation(int initiativeId);
        Task<int> UpdateInitiativeTypeFromFlag(int initiativeId);
        Task<int> ChangeApproverStatusTrackingFromSetActionBy_NOMAX(Initiative initiative, InitiativeTypeSubType initiativeTypeSubType);
        Task<Owner> BudgetTeamApprover_CIM(InitiativeTypeSubType initiativeTypeSubType);
        Task<int> RemoveActionBy_ByStage(int initiativeId, string stage, string approverEmail);
        Task<string[]> GetInitiativeTypeCapex();
        Task<InitiativeActionStatusFromActionBy> GetInitiativeActionStatusFromActionBy(int initiativeId);
        Task<int> RunStoreProcedureFixValueMissing(int initiativeId);
        Task<int> UpdateByUser(int initiativeId, string user);
        Task<int> UpdateSubType(int initiativeId);
        Task<string> GetSubTypeFromInitiative(int initiativeId);
        Task<Owner> EVPOrgChartApprover(InitiativeTypeSubType initiativeTypeSubType);
        Task<decimal> GetCostEstCapexAndCostEstOpex(int initiativeId);
        Task<string> GetNowStageByOrder(int nowOrderStage, InitiativeTypeSubType initiativeTypeSubType);
        Task<string> CheckApproverPosition(int initiativeId, string approverEmail);
        Task<int> RemoveActionBy_ByPosition(int initiativeId, string position, string approverEmail, string updateStage);
        Task<FileStreamResult> PrintData(int id);
        Task<int> DuplicateInitiative(int id,string code,string userName);
        Task<List<InitiativeHistoryIndex>> GetHistoryIndex(int id);
        Task<int> AddStagesPimCapex(Initiative initiative, InitiativeTypeSubType initiativeTypeSubType);
        Task<PagedList<OwnerInitiativeList>> GetOwnerInitiativeList(InitiativeParams InitiativeParams);
        Task<OwnerInitiativeDetail> GetOwnerInitiativeDetail(string employeeId);
        Task<PagedList<RoleDetailSetting>> GetRoleDetail(PagingParam Params);
        Task<Owner> UpdateOwnerInitiative(OwnerInitiativeDetail InitiativeParams);
        Task<int> GetOrderStage_OnRevise(Initiative initiative, InitiativeTypeSubType initiativeTypeSubType);
        Task<int[]> GetOrderStagesOwnerAction(Initiative initiative, InitiativeTypeSubType initiativeTypeSubType);
        Task<string> GetStageNameOutput(int id, string stage = null);
        Task<bool> CheckIsNextStageOwnerAction(int id, ApprovalNewSystemParam approvalNewSystemParam = null);
        Task<bool> IsDimCapex();
        Task<bool> IsNewFeature();
        Task<List<initiativeMemberModel>> GetInitiative50(int[] initiativeIdList, string type);
        Task<ApprovalNewSystemParam> OnInitiativeApproveClick(ApprovalNewSystemParam approvalNewSystemParam, InitiativeSubmit initiativeSubmit);
        Task<ApprovalNewSystemParam> OnInitiativeSubmitClick(ApprovalNewSystemParam approvalNewSystemParam, InitiativeSubmitStageStatus initiativeSubmitStageStatus);
        Task<bool> IsNewApprovalSystemx();
        Task<string> GetFlowTypeOfInitiative(int id);
        Task<string> GetEventOfInitiative(int id);
        Task<List<Initiative>> GetInitiativeKpi(string param);
        Task CallMicrosoftFlow(int id, string action, string URLType);
        Task<bool> UpdateCreateType(int id, int? createType);

        Task<object> GetRequestPoolPimInitiativeList(SearchConditonPoolPim searchConditonPoolPim);
        Task<int> UpdateFromFieldSSPIM(int id, string SSPIM, ApprovalNewSystemParam approvalNewSystemParam);
        Task<int> UpdateUpdatedDate_UpdatedBy(int id, string updatedBy, DateTime? dateTime = null);
        Task<int> UpdateLastSubmittedDate(int id, DateTime? dateTime = null);
        Task<List<V_InitiativeStageDetail>> GetInitiativeStages(int id);
        Task<List<InitiativeStageDetail>> GetInitiativeStagesByInitiativeId(int id);
        Task<IEnumerable<InitiativeList>> Get3Dots(IEnumerable<InitiativeList> initiative);
        Task<bool> GetIsViewSubmittoForm(InitiativeIdEmail initiativeIdEmail);
        Task<DateTime?> GetLastSubmittedDate(int id);
        Task<string> GetButtonAction(InitiativeButtonAction initiativeButtonAction);
        Task<ApprovalNewSystemParam> GetNowStageStatus(ApprovalNewSystemParam approvalNewSystemParam);
        Task<int> GetInitiativeIdFromInitiativeCode(InitiativeCOde initiativeCode);
        Task<int> ExecuteStoredProcedureInitiative(string storeName, int initiativeId);
        Task<IEnumerable<InitiativeList>> GetNowStatus(IEnumerable<InitiativeList> initiative);
        Task<int> UpdateApprovedDate(int id, string updatedBy, DateTime? dateTime = null);
        Task<List<initiativeMemberModel>> GetStages_SwitchProcessVAC(List<initiativeMemberModel> initiativeMemberModels);
        Task<int> VACActionSubmit(int id, InitiativeSubmitStageStatus initiativeSubmitStageStatus, string gotoStage);

        Task<bool> CreateReferenceIniPoolPim(int id, InitiativeListPoolPim[] initiativeList);

        Task<List<InitiativeListPoolPim>> GetReferenceIniPoolPim(int id);
        Task<InitiativeListPoolPim> GetReferenceIniPoolPimById(int id);
        Task<FileStreamResult> ExportAnyExcelFromDatatable(DataTable dt, string fileName);
        Task<int> ApproveSystemTrigger(int id);
        Task<int> UpdateCancelledComment(int id, InitiativeSubmitStageStatus initiativeSubmitStageStatus);


        Task<bool> SyncExcelToImpact(ImpactExcel file);
        Task<List<Owner>> GetOwnerNameByActionCode(int InitiativeId, string actionCode);
        Task<int> SetInitiativeFlowRevise(int id);
        Task<string> GetPlantMappingCommonData(string plant);
        Task<string> CheckPlantMappingRamJFactor(string plant);
        Task<Object> GetDataFromInterface(int id);

        Task<int> CheckOwnerOnInitiativeAction(Initiative initiative, InitiativeUpdate initiativeUpdate);
        Task<int> UpdateIntiativeStageDetail(int id, string initiativeType);
        Task<int> CheckPermissionAndInsertAction(ApprovalNewSystemParam approvalNewSystemParam);
        Task<List<Models.ApprovalFlow.InitiativeStage>> GetInitiativeStageForMaxPermission(int initiativeId);

        Task<List<Owner>> GetOwnerNameByIndicatorByPlant(int InitiativeId, string actionCode, string plant);

    }
}